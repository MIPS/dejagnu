# Test procedures in lib/utils.exp.				-*- Tcl -*-

set srcdir [lindex $argv 0]
set subdir [lindex $argv 1]
set objdir [lindex $argv 2]

if [ file exists $objdir/setval.tmp ] {
    source $objdir/setval.tmp
} else {
    puts "ERROR: $objdir/setval.tmp doesn't exist"
}
if [ file exists $srcdir/$subdir/default_procs.tcl ] {
    source "$srcdir/$subdir/default_procs.tcl"
} else {
    puts "ERROR: $srcdir$subdir/default_procs.tcl doesn't exist"
}

set file $srcdir/../lib/utils.exp
if [ file exists $file] {
    source $file
} else {
    puts "ERROR: $file doesn't exist"
}

# Test getdirs:
#
if [lib_pat_test "getdirs" "${srcdir}/runtest.all" "runtest.all/topdir" ] {
    puts "FAILED: getdirs toplevel, no arguments"
} else {
    puts "PASSED: getdirs toplevel, no arguments"
}

if [lib_pat_test "getdirs" "${srcdir}/runtest.all top*" "runtest.all/topdir" ] {
    puts "FAILED: getdirs toplevel, one subdir"
} else {
    puts "PASSED: getdirs toplevel, one subdir"
}

if [lib_pat_test "getdirs" "${srcdir}/runtest.all/topdir" "subdir1*subdir2" ] {
    puts "FAILED: getdirs toplevel, two subdirs"
} else {
    puts "PASSED: getdirs toplevel, two subdirs"
}

# Test relative_filename:
#
if { [relative_filename "/foo/test" "/foo/test/bar/baz" ] == "bar/baz" } {
    puts "PASSED: relative_filename, simple prefix"
} else {
    puts "FAILED: relative_filename, simple prefix"
}
if { [relative_filename "/foo/test" "/bar/test" ] == "../../bar/test" } {
    puts "PASSED: relative_filename, up to top"
} else {
    puts "FAILED: relative_filename, up to top"
}
if { [relative_filename "/tmp/foo-test" "/tmp/bar/test" ] == "../bar/test" } {
    puts "PASSED: relative_filename, up one level"
} else {
    puts "FAILED: relative_filename, up one level"
}
if { [relative_filename "/tmp/foo-test" "/tmp/foo-test" ] == "" } {
    puts "PASSED: relative_filename, same name"
} else {
    puts "FAILED: relative_filename, same name"
}

# Test find:
#
if [string match "*/subdir2/subfile2" "[find ${srcdir}/runtest.all/topdir/subdir2 sub*]"] {
    puts "PASSED: find, only one level deep"
} else {
    puts "FAILED: find, only one level deep"
}

if [regexp ".*/subdir1/subsubdir1/subsubfile1( |$)" "[find ${srcdir}/runtest.all/topdir/subdir1 sub*]"] {
    puts "PASSED: find, two levels deep"
} else {
    puts "FAILED: find, two  levels deep"
}

# Environment varible utility tests.
#

if [info exists env(TESTRUN)] {
    unset env(TESTRUN)
}

# Test setenv:
#
setenv TESTRUN FooBar
if [info exists env(TESTRUN)] {
    if { $env(TESTRUN) == "FooBar" } {
        pass "setenv, set an environment variable"
    } else {
        fail "setenv, set an environment variable"
    }
} else {
    fail "setenv, set an environment variable"
}

# Test getenv:
#
if [info exists env(TESTRUN)] {
    if { [getenv TESTRUN] == "FooBar" } {
        pass "getenv, get an environment variable"
    } else {
        fail "getenv, get an environment variable"
    }
} else {
    untested "getenv, get an environment variable"
}

# Test unsetenv:
#
if [info exists env(TESTRUN)] {
    unsetenv TESTRUN
    if [info exists env(TESTRUN)] {
        fail "unsetenv, unset an environment variable"
    } else {
        pass "unsetenv, unset an environment variable"
    }
} else {
    untested "unsetenv, unset an environment variable"
}

# Test 'which' using a relative path.
#
if {[which ./config.status] != 0} {
  pass "which, relative path to config.status"
} else {
  fail "which, relative path to config.status"
}

# Test 'which' using an absolute path.
#
if {[which [file join $objdir config.status]] != 0} {
  pass "which, absolute path to config.status"
} else {
  fail "which, absolute path to config.status"
}

# Test 'which make'.
#
if {[which make] != 0} {
  pass "which, make"
} else {
  fail "which, make"
}

### Do not adjust the comment on the next line. The grep test case
### depends on it.

# Test grep!
if {[llength [grep ${srcdir}/runtest.all/utils.test "^# Test grep!"]] == 1} {
  pass "grep, no options"
} else {
  fail "grep, no options"
}

# Test grep with line option.
set result [grep ${srcdir}/runtest.all/utils.test "^# Test grep!" line]
if {[llength $result] == 1 && [regexp {^\d+ # Test grep!} [lindex $result 0]]} {
  pass "grep, line option"
} else {
  fail "grep, line option"
}

# Test grep with -n option.
set result [grep -n ${srcdir}/runtest.all/utils.test "^# Test grep!"]
if {[llength $result] == 1 && [regexp {^\d+ # Test grep!} [lindex $result 0]]} {
  pass "grep, -n option"
} else {
  fail "grep, -n option"
}

# Test diff proc.

# Setup.
set f1 [open diff1.txt w]
set f2 [open diff2.txt w]
foreach f [list $f1 $f2] {
  puts $f "Hello world"
  close $f
}

# Two identical files; expect 1.
if {[diff diff1.txt diff2.txt] == 1} {
  pass "diff, identical files"
} else {
  fail "diff, identical files"
}

# Now remove one file; expect 0.
file delete diff1.txt
if {[diff diff1.txt diff2.txt] == 0} {
  pass "diff, one file missing"
} else {
  fail "diff, one file missing"
}

# diff1.txt differs from diff2.txt; expect -1.
set f [open diff1.txt w]
puts $f "Hello Cygnus"
close $f
if {[diff diff1.txt diff2.txt] == -1} {
  pass "diff, different files"
} else {
  fail "diff, different files"
}

# diff teardown.
file delete -force diff1.txt diff2.txt


# Test runtest_file_p.

if {[runtest_file_p {foo.exp} foo.c]} {
  pass "runtest_file_p, bare foo.exp matches foo.c"
} else {
  fail "runtest_file_p, bare foo.exp matches foo.c"
}

if {[runtest_file_p {foo.exp foo.c} foo.c]} {
  pass "runtest_file_p, foo.exp=foo.c matches foo.c"
} else {
  fail "runtest_file_p, foo.exp=foo.c matches foo.c"
}

if {[runtest_file_p {foo.exp foo.*} foo.c]} {
  pass "runtest_file_p, foo.exp=foo.* matches foo.c"
} else {
  fail "runtest_file_p, foo.exp=foo.* matches foo.c"
}

if {![runtest_file_p {foo.exp bar.*} foo.c]} {
  pass "runtest_file_p, foo.exp=bar.* excludes foo.c"
} else {
  fail "runtest_file_p, foo.exp=bar.* excludes foo.c"
}
